{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":["file:///D:/KAYAM_SAI_KRISHNA/dem/secure-web-demo/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined;\r\n};\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 80, "column": 0}, "map": {"version":3,"sources":["file:///D:/KAYAM_SAI_KRISHNA/dem/secure-web-demo/src/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { prisma } from \"@/lib/prisma\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { z } from \"zod\";\r\n\r\nconst schema = z.object({\r\n  firstName: z\r\n    .string()\r\n    .min(2, \"First name must be at least 2 characters\")\r\n    .max(50, \"First name is too long\")\r\n    .regex(/^[a-zA-Z\\s]+$/, \"First name can only contain letters and spaces\"),\r\n  lastName: z\r\n    .string()\r\n    .min(2, \"Last name must be at least 2 characters\")\r\n    .max(50, \"Last name is too long\")\r\n    .regex(/^[a-zA-Z\\s]+$/, \"Last name can only contain letters and spaces\"),\r\n  email: z\r\n    .string()\r\n    .email(\"Invalid email format\")\r\n    .toLowerCase()\r\n    .trim(),\r\n  password: z\r\n    .string()\r\n    .min(8, \"Password must be at least 8 characters\")\r\n    .max(100, \"Password is too long\")\r\n    .regex(\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[\\w\\W]{8,}$/,\r\n      \"Password must contain at least one uppercase letter, one lowercase letter, and one number\"\r\n    ),\r\n  phone: z\r\n    .string()\r\n    .min(10, \"Phone number must be at least 10 digits\")\r\n    .max(15, \"Phone number is too long\")\r\n    .regex(/^\\+?[\\d\\s-]+$/, \"Invalid phone number format\"),\r\n});\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const body = await req.json();\r\n    const validatedData = schema.parse(body);\r\n\r\n    // Check if user already exists\r\n    const existingUser = await prisma.user.findFirst({\r\n      where: {\r\n        email: validatedData.email,\r\n      },\r\n    });\r\n\r\n    if (existingUser) {\r\n      return NextResponse.json(\r\n        { \r\n          error: \"Email already registered\",\r\n        },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Hash password with increased security\r\n    const hashedPassword = await bcrypt.hash(validatedData.password, 12);\r\n\r\n    // Create user with profile\r\n    const fullName = `${validatedData.firstName} ${validatedData.lastName}`;\r\n    const user = await prisma.user.create({\r\n      data: {\r\n        email: validatedData.email,\r\n        password: hashedPassword,\r\n        role: \"USER\",\r\n        profile: {\r\n          create: {\r\n            firstName: validatedData.firstName,\r\n            lastName: validatedData.lastName,\r\n            fullName: fullName,\r\n            primaryPhone: validatedData.phone,\r\n            gender: \"PREFER_NOT_TO_SAY\",\r\n            dateOfBirth: new Date('1990-01-01'), // Default, user can update later\r\n            maritalStatus: \"SINGLE\",\r\n            fatherName: \"To be updated\",\r\n            motherName: \"To be updated\",\r\n          },\r\n        },\r\n      },\r\n      select: {\r\n        id: true,\r\n        email: true,\r\n        role: true,\r\n        createdAt: true,\r\n        profile: {\r\n          select: {\r\n            firstName: true,\r\n            lastName: true,\r\n            fullName: true,\r\n            primaryPhone: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    return NextResponse.json({\r\n      user,\r\n      message: \"Registration successful\",\r\n    }, { \r\n      status: 201,\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      }\r\n    });\r\n  } catch (error) {\r\n    if (error instanceof z.ZodError) {\r\n      const errorMessage = error.issues[0]?.message || \"Invalid request data\";\r\n      return NextResponse.json(\r\n        { error: errorMessage },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.error(\"[REGISTRATION_ERROR]\", error);\r\n    return NextResponse.json(\r\n      { error: \"An error occurred during registration. Please try again.\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AACA;;;;;AAEA,MAAM,SAAS,oLAAC,CAAC,MAAM,CAAC;IACtB,WAAW,oLAAC,CACT,MAAM,GACN,GAAG,CAAC,GAAG,4CACP,GAAG,CAAC,IAAI,0BACR,KAAK,CAAC,iBAAiB;IAC1B,UAAU,oLAAC,CACR,MAAM,GACN,GAAG,CAAC,GAAG,2CACP,GAAG,CAAC,IAAI,yBACR,KAAK,CAAC,iBAAiB;IAC1B,OAAO,oLAAC,CACL,MAAM,GACN,KAAK,CAAC,wBACN,WAAW,GACX,IAAI;IACP,UAAU,oLAAC,CACR,MAAM,GACN,GAAG,CAAC,GAAG,0CACP,GAAG,CAAC,KAAK,wBACT,KAAK,CACJ,8CACA;IAEJ,OAAO,oLAAC,CACL,MAAM,GACN,GAAG,CAAC,IAAI,2CACR,GAAG,CAAC,IAAI,4BACR,KAAK,CAAC,iBAAiB;AAC5B;AAEO,eAAe,KAAK,GAAgB;IACzC,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,gBAAgB,OAAO,KAAK,CAAC;QAEnC,+BAA+B;QAC/B,MAAM,eAAe,MAAM,gIAAM,CAAC,IAAI,CAAC,SAAS,CAAC;YAC/C,OAAO;gBACL,OAAO,cAAc,KAAK;YAC5B;QACF;QAEA,IAAI,cAAc;YAChB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBACE,OAAO;YACT,GACA;gBAAE,QAAQ;YAAI;QAElB;QAEA,wCAAwC;QACxC,MAAM,iBAAiB,MAAM,8IAAM,CAAC,IAAI,CAAC,cAAc,QAAQ,EAAE;QAEjE,2BAA2B;QAC3B,MAAM,WAAW,GAAG,cAAc,SAAS,CAAC,CAAC,EAAE,cAAc,QAAQ,EAAE;QACvE,MAAM,OAAO,MAAM,gIAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACpC,MAAM;gBACJ,OAAO,cAAc,KAAK;gBAC1B,UAAU;gBACV,MAAM;gBACN,SAAS;oBACP,QAAQ;wBACN,WAAW,cAAc,SAAS;wBAClC,UAAU,cAAc,QAAQ;wBAChC,UAAU;wBACV,cAAc,cAAc,KAAK;wBACjC,QAAQ;wBACR,aAAa,IAAI,KAAK;wBACtB,eAAe;wBACf,YAAY;wBACZ,YAAY;oBACd;gBACF;YACF;YACA,QAAQ;gBACN,IAAI;gBACJ,OAAO;gBACP,MAAM;gBACN,WAAW;gBACX,SAAS;oBACP,QAAQ;wBACN,WAAW;wBACX,UAAU;wBACV,UAAU;wBACV,cAAc;oBAChB;gBACF;YACF;QACF;QAEA,OAAO,gJAAY,CAAC,IAAI,CAAC;YACvB;YACA,SAAS;QACX,GAAG;YACD,QAAQ;YACR,SAAS;gBACP,gBAAgB;YAClB;QACF;IACF,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,oLAAC,CAAC,QAAQ,EAAE;YAC/B,MAAM,eAAe,MAAM,MAAM,CAAC,EAAE,EAAE,WAAW;YACjD,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAa,GACtB;gBAAE,QAAQ;YAAI;QAElB;QAEA,QAAQ,KAAK,CAAC,wBAAwB;QACtC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAA2D,GACpE;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}