{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 121, "column": 0}, "map": {"version":3,"sources":["file:///D:/KAYAM_SAI_KRISHNA/dem/secure-web-demo/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined;\r\n};\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 134, "column": 0}, "map": {"version":3,"sources":["file:///D:/KAYAM_SAI_KRISHNA/dem/secure-web-demo/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport { prisma } from \"./prisma\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { User } from \"@prisma/client\";\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  pages: {\r\n    signIn: \"/login\",\r\n    error: \"/login\",\r\n  },\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          return null;\r\n        }\r\n\r\n        const user = await prisma.user.findUnique({\r\n          where: {\r\n            email: credentials.email,\r\n          },\r\n        });\r\n\r\n        if (!user) {\r\n          return null;\r\n        }\r\n\r\n        const isValid = await bcrypt.compare(credentials.password, user.password);\r\n\r\n        if (!isValid) {\r\n          return null;\r\n        }\r\n\r\n        return {\r\n          id: user.id,\r\n          email: user.email,\r\n          role: user.role,\r\n        };\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        return {\r\n          ...token,\r\n          id: user.id,\r\n          role: (user as unknown as User).role,\r\n        };\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      return {\r\n        ...session,\r\n        user: {\r\n          ...session.user,\r\n          id: token.id,\r\n          role: token.role,\r\n        },\r\n      };\r\n    },\r\n  },\r\n};\r\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;;;;AAGO,MAAM,cAA+B;IAC1C,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;QACR,OAAO;IACT;IACA,WAAW;QACT,IAAA,qKAAmB,EAAC;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,MAAM,OAAO,MAAM,gIAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBACL,OAAO,YAAY,KAAK;oBAC1B;gBACF;gBAEA,IAAI,CAAC,MAAM;oBACT,OAAO;gBACT;gBAEA,MAAM,UAAU,MAAM,8IAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ;gBAExE,IAAI,CAAC,SAAS;oBACZ,OAAO;gBACT;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,OAAO;oBACL,GAAG,KAAK;oBACR,IAAI,KAAK,EAAE;oBACX,MAAM,AAAC,KAAyB,IAAI;gBACtC;YACF;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,OAAO;gBACL,GAAG,OAAO;gBACV,MAAM;oBACJ,GAAG,QAAQ,IAAI;oBACf,IAAI,MAAM,EAAE;oBACZ,MAAM,MAAM,IAAI;gBAClB;YACF;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 216, "column": 0}, "map": {"version":3,"sources":["file:///D:/KAYAM_SAI_KRISHNA/dem/secure-web-demo/src/app/api/profile/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\nimport { getServerSession } from \"next-auth\";\r\nimport { authOptions } from \"@/lib/auth\";\r\nimport { prisma } from \"@/lib/prisma\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n  try {\r\n    // Check authentication\r\n    const session = await getServerSession(authOptions);\r\n    \r\n    if (!session || !session.user) {\r\n      return NextResponse.json(\r\n        { error: \"Authentication required\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = session.user.id;\r\n\r\n    // Fetch user profile with all related data\r\n    const user = await prisma.user.findUnique({\r\n      where: { id: userId },\r\n      include: {\r\n        profile: {\r\n          include: {\r\n            currentAddress: true,\r\n            permanentAddress: true,\r\n            education: true,\r\n            employment: true,\r\n          },\r\n        },\r\n        kycData: true,\r\n        biometricData: true,\r\n        financialProfile: true,\r\n        bankAccounts: {\r\n          where: { isActive: true },\r\n          orderBy: { isPrimary: 'desc' },\r\n        },\r\n        creditScore: {\r\n          orderBy: { createdAt: 'desc' },\r\n          take: 1,\r\n        },\r\n        loanApplications: {\r\n          orderBy: { createdAt: 'desc' },\r\n          take: 5,\r\n          select: {\r\n            id: true,\r\n            applicationNumber: true,\r\n            loanType: true,\r\n            amount: true,\r\n            status: true,\r\n            createdAt: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    if (!user) {\r\n      return NextResponse.json(\r\n        { error: \"User not found\" },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    // Remove sensitive information\r\n    const { password, ...userWithoutPassword } = user;\r\n\r\n    return NextResponse.json({\r\n      user: userWithoutPassword,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"[PROFILE_GET_ERROR]\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to fetch profile\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function PUT(req: NextRequest) {\r\n  try {\r\n    // Check authentication\r\n    const session = await getServerSession(authOptions);\r\n    \r\n    if (!session || !session.user) {\r\n      return NextResponse.json(\r\n        { error: \"Authentication required\" },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = session.user.id;\r\n    const body = await req.json();\r\n\r\n    const {\r\n      profile: profileData,\r\n      address: addressData,\r\n      employment: employmentData,\r\n    } = body;\r\n\r\n    // Update user profile\r\n    const updatedUser = await prisma.user.update({\r\n      where: { id: userId },\r\n      data: {\r\n        profile: profileData ? {\r\n          upsert: {\r\n            create: {\r\n              ...profileData,\r\n              fullName: `${profileData.firstName} ${profileData.lastName}`,\r\n            },\r\n            update: {\r\n              ...profileData,\r\n              fullName: `${profileData.firstName} ${profileData.lastName}`,\r\n            },\r\n          },\r\n        } : undefined,\r\n      },\r\n      include: {\r\n        profile: {\r\n          include: {\r\n            currentAddress: true,\r\n            employment: true,\r\n          },\r\n        },\r\n      },\r\n    });\r\n\r\n    // Update address if provided\r\n    if (addressData && updatedUser.profile) {\r\n      await prisma.address.upsert({\r\n        where: { currentUserId: updatedUser.profile.id },\r\n        create: {\r\n          ...addressData,\r\n          type: \"CURRENT\",\r\n          currentUserId: updatedUser.profile.id,\r\n        },\r\n        update: addressData,\r\n      });\r\n    }\r\n\r\n    // Update employment if provided\r\n    if (employmentData && updatedUser.profile) {\r\n      await prisma.employment.upsert({\r\n        where: { profileId: updatedUser.profile.id },\r\n        create: {\r\n          ...employmentData,\r\n          profileId: updatedUser.profile.id,\r\n        },\r\n        update: employmentData,\r\n      });\r\n    }\r\n\r\n    return NextResponse.json({\r\n      message: \"Profile updated successfully\",\r\n    });\r\n  } catch (error) {\r\n    console.error(\"[PROFILE_UPDATE_ERROR]\", error);\r\n    return NextResponse.json(\r\n      { error: \"Failed to update profile\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}