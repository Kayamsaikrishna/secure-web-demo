{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 3, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["file:///D:/KAYAM_SAI_KRISHNA/dem/secure-web-demo/src/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\r\n\r\nconst globalForPrisma = globalThis as unknown as {\r\n  prisma: PrismaClient | undefined;\r\n};\r\n\r\nexport const prisma = globalForPrisma.prisma ?? new PrismaClient();\r\n\r\nif (process.env.NODE_ENV !== \"production\") globalForPrisma.prisma = prisma;\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,kBAAkB;AAIjB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,6IAAY;AAEhE,wCAA2C,gBAAgB,MAAM,GAAG","debugId":null}},
    {"offset": {"line": 128, "column": 0}, "map": {"version":3,"sources":["file:///D:/KAYAM_SAI_KRISHNA/dem/secure-web-demo/src/lib/auth.ts"],"sourcesContent":["import { NextAuthOptions } from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport { prisma } from \"./prisma\";\r\nimport bcrypt from \"bcryptjs\";\r\nimport { User } from \"@prisma/client\";\r\n\r\nexport const authOptions: NextAuthOptions = {\r\n  session: {\r\n    strategy: \"jwt\",\r\n  },\r\n  pages: {\r\n    signIn: \"/login\",\r\n    error: \"/login\",\r\n  },\r\n  providers: [\r\n    CredentialsProvider({\r\n      name: \"credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"email\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n      async authorize(credentials) {\r\n        if (!credentials?.email || !credentials?.password) {\r\n          return null;\r\n        }\r\n\r\n        const user = await prisma.user.findUnique({\r\n          where: {\r\n            email: credentials.email,\r\n          },\r\n        });\r\n\r\n        if (!user) {\r\n          return null;\r\n        }\r\n\r\n        const isValid = await bcrypt.compare(credentials.password, user.password);\r\n\r\n        if (!isValid) {\r\n          return null;\r\n        }\r\n\r\n        return {\r\n          id: user.id,\r\n          email: user.email,\r\n          name: user.name,\r\n          role: user.role,\r\n        };\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async jwt({ token, user }) {\r\n      if (user) {\r\n        return {\r\n          ...token,\r\n          id: user.id,\r\n          role: (user as unknown as User).role,\r\n        };\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      return {\r\n        ...session,\r\n        user: {\r\n          ...session.user,\r\n          id: token.id,\r\n          role: token.role,\r\n        },\r\n      };\r\n    },\r\n  },\r\n};\r\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;;;;AAGO,MAAM,cAA+B;IAC1C,SAAS;QACP,UAAU;IACZ;IACA,OAAO;QACL,QAAQ;QACR,OAAO;IACT;IACA,WAAW;QACT,IAAA,qKAAmB,EAAC;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa,SAAS,CAAC,aAAa,UAAU;oBACjD,OAAO;gBACT;gBAEA,MAAM,OAAO,MAAM,gIAAM,CAAC,IAAI,CAAC,UAAU,CAAC;oBACxC,OAAO;wBACL,OAAO,YAAY,KAAK;oBAC1B;gBACF;gBAEA,IAAI,CAAC,MAAM;oBACT,OAAO;gBACT;gBAEA,MAAM,UAAU,MAAM,8IAAM,CAAC,OAAO,CAAC,YAAY,QAAQ,EAAE,KAAK,QAAQ;gBAExE,IAAI,CAAC,SAAS;oBACZ,OAAO;gBACT;gBAEA,OAAO;oBACL,IAAI,KAAK,EAAE;oBACX,OAAO,KAAK,KAAK;oBACjB,MAAM,KAAK,IAAI;oBACf,MAAM,KAAK,IAAI;gBACjB;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,OAAO;oBACL,GAAG,KAAK;oBACR,IAAI,KAAK,EAAE;oBACX,MAAM,AAAC,KAAyB,IAAI;gBACtC;YACF;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,OAAO;gBACL,GAAG,OAAO;gBACV,MAAM;oBACJ,GAAG,QAAQ,IAAI;oBACf,IAAI,MAAM,EAAE;oBACZ,MAAM,MAAM,IAAI;gBAClB;YACF;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 211, "column": 0}, "map": {"version":3,"sources":["file:///D:/KAYAM_SAI_KRISHNA/dem/secure-web-demo/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\r\nimport { authOptions } from \"@/lib/auth\";\r\n\r\nconst handler = NextAuth(authOptions);\r\n\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;AAEA,MAAM,UAAU,IAAA,kJAAQ,EAAC,mIAAW","debugId":null}}]
}